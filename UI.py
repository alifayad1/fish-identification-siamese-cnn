# -*- coding: utf-8 -*-
"""fyp_main_final_dirty.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Lv4DfXoz25ffAJpEDccPX4wr5inqQMpw

## Method 1
"""

####################### IMPORTING ###################################
from keras.models import Sequential
import time
import re
from skimage.util import random_noise
from keras.optimizers import Adam
from keras.layers import Conv2D, ZeroPadding2D, Activation, Input
from keras.models import Model
import keras
import seaborn as sns
from keras.preprocessing.image import ImageDataGenerator
from keras.layers.pooling import MaxPooling2D, AveragePooling2D
from keras.layers.core import Lambda, Flatten, Dense
from keras.optimizers import *
from keras.engine.topology import Layer
from keras import backend as K
from keras.regularizers import l2
import cv2
from skimage.transform import rotate, AffineTransform, warp
import os
from skimage import io, img_as_ubyte
import numpy as np
import keras.backend.tensorflow_backend as tb
tb._SYMBOLIC_SCOPE.value = True
from numpy import genfromtxt
import pandas as pd
import tensorflow as tf
import numpy.random as rng
from sklearn.utils import shuffle
import matplotlib.pyplot as plt
import random
from PIL import Image
import random
import keras
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from PIL import Image as pil_image
from keras import backend as K
from keras import regularizers
from keras.engine.topology import Input
from keras.layers import Activation, Add, BatchNormalization, Concatenate, Conv2D, Dense, Flatten, GlobalMaxPooling2D, \
    Lambda, MaxPooling2D, Reshape
from keras.models import Model
from keras.optimizers import Adam
from keras.preprocessing.image import img_to_array
from keras.utils import Sequence
from pandas import read_csv
from scipy.ndimage import affine_transform
from sklearn.preprocessing import LabelEncoder
import random
from keras.models import load_model
import pandas as pd
import numpy as np
import streamlit as st
from os import listdir
from os.path import isfile, join
from PIL import Image
import unittest
from keras.models import load_model
##################################################################################




####################### IMPORTING TESTING DATA ###################################
from PIL import Image
@st.cache
def load_testing_data(DIR):
    IMG_SIZE=384
    train_data = []
    train_labels = []
    i = 0
    for img in os.listdir(DIR):
        i+=1
        path = os.path.join(DIR, img)
        name = img.split("_")[0] +" "+img.split("_")[1]
        img = Image.open(path)
        img = img.convert('RGB')
        img = img.resize((IMG_SIZE, IMG_SIZE), Image.ANTIALIAS)
        train_data.append(np.array(img))
        train_labels.append(name)
    print("DATA LOADED")

    return np.asarray(train_data),np.asarray(train_labels)

x_test, y_test = load_testing_data("/Users/mbpro/Desktop/y_test_rita")




##################################################################################





####################### Encoder ##################################################
le = LabelEncoder()
y_test = le.fit_transform(y_test)
##################################################################################



####################### Making pairs ##################################################
def make_pairs_test(x, y,image1):
    num_classes = max(y) + 1
    digit_indices = [np.where(y == i)[0] for i in range(num_classes)]

    pairs = []
    labels = []
    predict_labels = []
    #xp = x[0]
    for idx1 in range(len(x)):
        # add a matching example
        x1 = x[idx1]
        label1 = y[idx1]
        predict_labels.append(y[idx1])
        idx2 = random.choice(digit_indices[label1])


        pairs += [[np.array(image1), x1]]
        labels += [0]

    return np.array(pairs), np.array(labels), predict_labels


##################################################################################



####################### Loading Model ##################################################
modelb = load_model('/Users/mbpro/Desktop/fyp8_best_final_neg5lr_128.h5')
##################################################################################


####################### UI ##################################################

onlyfiles = [f for f in listdir("/Users/mbpro/Desktop/y_test_small") if isfile(join("/Users/mbpro/Desktop/y_test_small", f))]
imageselect = st.sidebar.selectbox("Pick an image.", onlyfiles,key="na_upperj")
st.sidebar.title("About")
st.sidebar.info("This is a demo application written using Streamlit. The application identifies the Fish in the picture. It was built using a Siamese CNN.")
st.title('Fish Identification')
st.write("Pick an image from the left. You'll be able to view the image.")
st.write("When you're ready, submit a prediction on the left.")
st.write("")
image = Image.open("/Users/mbpro/Desktop/y_test_small/" + imageselect)
st.image(image, caption="Let's predict the fish!", use_column_width=True)
img = image.convert('RGB')
img = img.resize((384, 384), Image.ANTIALIAS)
if st.sidebar.button('Predict Fish'):
    print("MAKING PAIRS...")
    pairs_test, labels_test, predict_labels = make_pairs_test(x_test, y_test,img)
####################### Predicting ##################################################
    print("predicting....")
    y_pred = modelb.predict([pairs_test[:,0], pairs_test[:,1]])
    #print(le.inverse_transform([predict_labels[0]]))
    best_res = predict_labels[np.argmax(y_pred)]
    name_of_fish=le.inverse_transform([best_res])
    name_of_fish_string=str(name_of_fish)
    whitelist = set('abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ')
    answer = ''.join(filter(whitelist.__contains__,name_of_fish_string))
    st.write("this fish is :"+answer)
    print("This Fish is :"+answer)
    #np.savetxt('predict_uniquefinal.txt', np.unique(predict_labels), fmt='%s')
##################################################################################
